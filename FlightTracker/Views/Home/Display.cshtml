@{
    ViewBag.Title = "Home Page";
}
<style>
    html, body {
        overflow: hidden;
    }

    body {
        padding: 0;
        margin: 0;
        padding: 0;
        background-color: gainsboro
        /*background-image: url("../../Resources/Images/map.png");*/
    }

    #canvas {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
    }
</style>
<script src="http://code.jquery.com/jquery-1.11.0.min.js"></script>

<html>
<body style="background-size:100% 100%; background-attachment:fixed">

    <canvas id="map" width="0" height="0"></canvas>
    <img id="map_pic" src="~/Resources/Images/map.png" alt="world map" hidden="hidden">

    <h2>DATA:</h2>
    <table>
        <tr>
            <td>lng:  </td>
            <td><p type="text" id="lng" size="5"></p></td>
        </tr>
        <tr>
            <td>lat:  </td>
            <td><p type="text" id="lat" size="5"></p></td>
        </tr>
    </table>
</body>
</html>



<script>
    window.onload = function () {
        var map = document.getElementById("map");
        map.width = window.innerWidth;
        map.height = window.innerHeight;
        var context = map.getContext("2d");
        context.translate(0, 0);
        var img = document.getElementById("map_pic");

        context.drawImage(img, 0, 0, img.width, img.height, 0, 0, map.width, map.height);
    };
</script>

<script>
    drawArcOnCanvas = (function (x, y, r, color) {
        var map = document.getElementById("map");
        var context = map.getContext("2d");
        console.log("Trying to draw on: " + x.toString() + "," + y.toString() + " of: " + map.clientWidth.toString() + "," + map.clientHeight.toString());
        context.fillStyle = color;
        context.beginPath();
        context.arc((Math.round(x * 10) / 10), (Math.round(y * 10) / 10), r, 0, 2 * Math.PI);
        context.fill();
    });
</script>

<script>
    var IntervalTime = @Session["time"] * 1000;
    var connected = @Session["connected"];
    var fromFileContent = @Session["fileContent"];

    var lastX = null;
    var lastY = null;

    if (fromFileContent == 0) {
        if (connected == 0) {
            alert("Not Connected to simulator!");
            throw new Error("Not Connected to simulator!");
        }
        
        drawLine = (function () {
            $.post( "@Url.Action("GetCord")").done(function (xml) {
                var xmlDoc = $.parseXML( xml ),
                $xml = $( xmlDoc ),
                lat = $xml.find("lat").text();
                lng = $xml.find("lng").text();

                var map = document.getElementById("map");
                var context = map.getContext("2d");

                var fLongtitude = parseFloat(lng.valueOf());
                var normLon = ((fLongtitude + 180.0) * (window.innerWidth / 360.0));

                var fLantitude = parseFloat(lat.valueOf());
                var normLat = ((fLantitude + 90.0) * (window.innerHeight / 180.0));

                if (lastX == null || lastY == null) {

                    drawArcOnCanvas(normLon, normLat, 10, "#09298f");
                    drawArcOnCanvas(normLon, normLat, 5, "#f00000");
                } else {

                    context.lineWidth = "10";
                    context.strokeStyle = "red";
                    context.beginPath();
                    context.moveTo((Math.round(lastX * 10) / 10), (Math.round(lastY * 10) / 10));
                    context.lineTo((Math.round(normLon * 10) / 10), (Math.round(normLat * 10) / 10));
                    context.stroke();
                }
                lastX = normLon;
                lastY = normLat;

                $("#lng").text(lng);
                $("#lat").text(lat);
            });
        });
        if (IntervalTime != 0) {
            setInterval(drawLine, IntervalTime);
            drawLine();
        } else {
            drawPoint = (function () {
                $.post( "@Url.Action("GetCord")").done(function (xml) {
                    var xmlDoc = $.parseXML(xml),
                    $xml = $(xmlDoc),
                    lat = $xml.find("lat").text();
                    lng = $xml.find("lng").text();

                    var map = document.getElementById("map");

                    var fLongtitude = parseFloat(lng.valueOf());
                    var normLon = ((fLongtitude + 180.0) * (window.innerWidth / 360.0));

                    var fLantitude = parseFloat(lat.valueOf());
                    var normLat = ((fLantitude + 90.0) * (window.innerHeight / 180.0));

                    drawArcOnCanvas(normLon, normLat, 10, "#09298f");
                    drawArcOnCanvas(normLon, normLat, 5, "#f00000");

                    $("#lng").text(lng);
                    $("#lat").text(lat);
                });
            });
            drawPoint();
        }
    }

    //read from file
    @if (ViewBag.data != null)
    {
        <text>

        var fileContent = Array();

        @for(int i = 0; i < ViewBag.data.Count; i++){
          <text> fileContent[@i] = "@ViewBag.data[@i]"; </text>
        }

        var lastX = null;
        var lastY = null;

        //Draws a line from one point to another using the lon and lat values
        drawLineFromFile = (function (longtitude, latitude) {

            var map = document.getElementById("map");
            var context = map.getContext("2d");

            longtitude = parseFloat(longtitude);
            latitude = parseFloat(latitude);
            
            var normLon = ((longtitude + 180.0) * (window.innerWidth / 360.0));
            var normLat = ((latitude + 90.0) * (window.innerHeight / 180.0));
            
            if (lastX == null || lastY == null) {

                drawArcOnCanvas(normLon, normLat, 10, "#09298f");
                drawArcOnCanvas(normLon, normLat, 5, "#f00000");
            } else {


                context.lineWidth = "10";
                context.strokeStyle = "red";
                context.beginPath();
                context.moveTo((Math.round(lastX * 10) / 10), (Math.round(lastY * 10) / 10));
                context.lineTo((Math.round(normLon * 10) / 10), (Math.round(normLat * 10) / 10));
                context.stroke();
            }
            lastX = normLon;
            lastY = normLat;

            $("#lng").text(longtitude);
            $("#lat").text(latitude);
        });

        drawPointFromFile = (function (longtitude, latitude) {
            var map = document.getElementById("map");

            fLongtitude = parseFloat(longtitude);
            latitude = parseFloat(latitude);

            var normLon = ((longtitude + 180.0) * (window.innerWidth / 360.0));
            var normLat = ((latitude + 90.0) * (window.innerHeight / 180.0));

            drawArcOnCanvas(normLon, normLat, 10, "#09298f");
            drawArcOnCanvas(normLon, normLat, 5, "#f00000");

            $("#lng").text(longtitude);
            $("#lat").text(latitude);
        });

        //iterate on the array and draw
        var i = 0;
        var interval = null;
        drawAll = (function () {
            var longtitude = fileContent[i * 5];
            var latitude = fileContent[i * 5 + 1];

            if (i == fileContent.length / 5) {
                clearInterval(interval);
                drawPointFromFile(longtitude, latitude);
                alert("Done reading from file.");
            } else {
                drawLineFromFile(longtitude, latitude);
                i++;
            }
        });

    interval = setInterval(drawAll, IntervalTime);
    </text>

    } else if ((int)Session["fileContent"] == 1) {
    <text>
        alert("Error in reading from file.");
        throw new Error("Error in file content");
    </text>
    }


</script>
